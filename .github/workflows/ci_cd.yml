name: CI/CD Pipeline

on:
  push:
    branches: 
      - main
      - develop
  pull_request:
    branches:
      - main
      - develop

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      zookeeper:
        image: confluentinc/cp-zookeeper:latest
        ports:
          - 2181:2181
        env:
          ZOOKEEPER_CLIENT_PORT: 2181
          ZOOKEEPER_TICK_TIME: 2000
      
      kafka:
        image: confluentinc/cp-kafka:latest
        ports:
          - 9092:9092
        env:
          KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
          KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
          KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
          KAFKA_CREATE_TOPICS: "orders:1:1,payments:1:1,stock:1:1"
        options: --health-cmd="kafka-topics --list --bootstrap-server kafka:9092" --health-interval=10s --health-timeout=5s --health-retries=5
      
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: ecommerce
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
    - uses: actions/checkout@v3

    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: 'maven'

    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml', '**/pom.xml.lock') }}
        restore-keys: ${{ runner.os }}-m2-

    - name: Build with Maven
      run: mvn clean install -DskipTests

    - name: Run tests
      run: mvn test
      continue-on-error: false

  build-and-push:
    strategy:
      matrix:
        service: ["ms-orders", "ms-payments", "ms-stock"]
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
    needs: [test]
    
    steps:
    - uses: actions/checkout@v3

    - name: Log in to GitHub Container Registry
      run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with: 
        context: .
        file: ${{ matrix.service }}/Dockerfile
        push: ${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' }}
        tags: |
          ghcr.io/${{ github.repository_owner }}/${{ matrix.service }}:latest
          ghcr.io/${{ github.repository_owner }}/${{ matrix.service }}:${{ github.sha }}
          ghcr.io/${{ github.repository_owner }}/${{ matrix.service }}:${{ github.ref_name }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    runs-on: ubuntu-latest
    needs: [build-and-push]
    steps:
    - uses: actions/checkout@master
    
    - name: Login to Heroku
      uses: actions/heroku@master
      env:
        HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
      with:
        args: container:login
    
    - name: Push to Heroku
      uses: actions/heroku@master
      env:
        HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
      with:
        args: container:push -a calm-fortress-1234 web
    
    - name: Release on Heroku
      uses: actions/heroku@master
      env:
        HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
      with:
        args: container:release -a calm-fortress-1234 web
